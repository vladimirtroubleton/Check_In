@page "/questionResponseAdd/{Id:int}"
@using AuthDataLayer.Models
@using QuestionDataLayer.ViewModels
@using QuestionDataLayer.Models
@inject AuthenticationStateProvider authProvider
@inject NavigationManager uriHelper
@inject Check_In.Services.users.UserService userServ
@inject Check_In.Services.Question.QuestionService questServ
<AuthorizeView>
    <Authorized>
        <div class="container">
            @if (question != null && questionForForm != null)
            {
                <EditForm Model="@questionForForm" OnValidSubmit="RegisterResponse" Context="addQ">
                    <DataAnnotationsValidator />
                    <ValidationSummary Model="@questionForForm" />
                    <div class="row">
                        <div class="col-12 mx-auto">
                            <div class="card">
                                <div class="card-body">
                                    <div class="card-title">Название опроса</div>
                                    <div class="card-title"><h4>@questionForForm.Name</h4></div>
                                    <div class="card-title">Группа</div>
                                    <div class="card-title">@questionForForm.GroupName</div>
                                    <div class="card-title">Вопросы:</div>
                                    <div class="form-group" style="@questStyle">
                                        <p class="counter">Вопрос : @questionForForm.Question</p>
                                        <InputText @bind-Value="questionForForm.QuestionResponse" class="form-control"></InputText>
                                    </div>
                                    <div class="form-group" style="@questStyle1">
                                        <p class="counter">Вопрос : @questionForForm.Question1</p>

                                        <InputText @bind-Value="questionForForm.Question1Response" class="form-control"></InputText>
                                    </div>
                                    <div class="form-group" style="@questStyle2">
                                        <p class="counter">Вопрос : @questionForForm.Question2</p>
                                        <InputText @bind-Value="questionForForm.Question2Response" class="form-control"></InputText>
                                    </div>
                                    <div class="form-group" style="@questStyle3">
                                        <p class="counter">Вопрос : @questionForForm.Question3</p>
                                        <InputText @bind-Value="questionForForm.Question3Response" class="form-control"></InputText>
                                    </div>
                                    <div class="form-group" style="@questStyle4">
                                        <p class="counter">Вопрос : @questionForForm.Question4</p>
                                        <InputText @bind-Value="questionForForm.Question4Response" class="form-control"></InputText>
                                    </div>
                                </div>
                                <button class="btn btn-outline-success" type="submit"> Ответить! </button>
                                    </div>
                                </div>
                            </div>
</EditForm>
            }
            else
            {
                <h4>Загрузка.....</h4>
            }
        </div>

    </Authorized>
</AuthorizeView>


@code {
    [Parameter]
    public int Id { get; set; }

    UserModel currentUser;

    QuestionViewModel question;

    QuestionResponseModel questionForForm;

    string questStyle = "display:none";
    string questStyle1= "display:none";
    string questStyle2= "display:none";
    string questStyle3= "display:none";
    string questStyle4= "display:none";

    int questCount;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        currentUser = await userServ.GetCurrentUser(authState.User.Identity.Name);
        question = await questServ.GetQuestionsById(Id);
        questCount = question.Questions.Count();


        questionForForm =await questServ.GetResponseModel(question, questCount , currentUser.Login);

        await FormedForm();
    }

    private async Task RegisterResponse()
    {
        await questServ.CreateResponse(questionForForm);
        uriHelper.NavigateTo("/questionUser");
    }

    private Task FormedForm()
    {
        switch (questCount)
        {
            case 1:
                {
                    questStyle =  "display:block";
                    break;
                }
            case 2:
                {
                    questStyle = "";
                    questStyle1 = "";
                    break;
                }
            case 3:
                {
                    questStyle = "";
                    questStyle1 = "";
                    questStyle2 = "";
                    break;
                }
            case 4:
                {
                    questStyle = "";
                    questStyle1 = "";
                    questStyle2 = "";
                    questStyle3 = "";
                    break;
                }
            case 5:
                {
                    questStyle = "";
                    questStyle1 = "";
                    questStyle2 = "";
                    questStyle3 = "";
                    questStyle4 = "";
                    break;
                }
        }
        return Task.CompletedTask;
    }
}
